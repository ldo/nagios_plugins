#!/usr/bin/python3
#+
# My third Nagios plugin -- check CPU usage.
#
# Copyright 2019 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <https://creativecommons.org/licenses/by/4.0/>.
#-

import os
import time
import argparse
import nagiosplugin
from ldo_nagios_useful import \
    PersistentStats

def load_cpuinfo() :
    result = None
    nr_cpus = 0
    for line in open("/proc/stat", "r") :
        items = line.strip().split()
        if len(items) > 1 :
            if items[0] == "cpu" : # total of all CPUs
                tick = float(os.sysconf("SC_CLK_TCK"))
                keys = ("user", "nice", "system", "idle", "iowait", "irq", "softirq", "steal", "guest", "guest_nice")[:len(items)]
                result = dict((key, float(item) / tick) for key, item in zip(keys, items[1:len(keys) - 1]))
            elif items[0].startswith("cpu") :
                nr_cpus += 1
            #end if
        #end if
    #end for
    if result == None :
        raise RuntimeError("no cpu line found in /proc/stat")
    #end if
    if nr_cpus == 0 :
        raise RuntimeError("no cpu«n» lines found in /proc/stat!?")
    #end if
    for k in result :
        result[k] /= nr_cpus
    #end for
    return \
        result
#end load_cpuinfo

class Cpufree(nagiosplugin.Resource) :

    def __init__(self) :
        self.stats = PersistentStats("cpu")
    #end __init__

    def probe(self) :
        now = time.time()
        cpuinfo = load_cpuinfo()
        counters = self.stats.get_and_update(cpuinfo, now)
        idle = counters["idle"]
        if idle[2] != None and idle[3] != 0 and idle[3] != None :
            fraction_idle = idle[2] / idle[3]
        else :
            fraction_idle = 1
        #end if
        metrics = \
          [
            nagiosplugin.Metric
              (
                name = "%idle",
                value = round(fraction_idle * 100),
                uom = "%"
              )
          ]
        return \
            metrics
    #end probe

#end Cpufree

def main() :
    parser = argparse.ArgumentParser(description = "check CPU usage")
    for shortopt, longopt, kwargs in \
        (
            (
                "-w", "--warning",
                {
                    "metavar" : "RANGE",
                    "default" : 5,
                    "help" : "warn if percentage of idle CPU falls below this",
                },
            ),
            (
                "-c", "--critical",
                {
                    "metavar" : "RANGE",
                    "default" : 1,
                    "help" : "critical if percentage of idle CPU falls below this",
                },
            ),
            (
                "-v", "--verbose",
                {
                    "action" : "count",
                    "default" : 0,
                    "help" : "increase output verbosity",
                },
            ),
        ) \
    :
        parser.add_argument(shortopt, longopt, **kwargs)
    #end for
    args = parser.parse_args()
    nagiosplugin.Check \
      (
        Cpufree(),
        nagiosplugin.ScalarContext("%idle", "@%d" % int(args.warning), "@%d" % int(args.critical)),
        nagiosplugin.Summary()
      ).main(verbose = args.verbose)
#end main

if __name__ == "__main__" :
    main()
#end if
