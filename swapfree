#!/usr/bin/python3
#+
# My second Nagios plugin -- check swap space.
#
# Copyright 2019 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <https://creativecommons.org/licenses/by/4.0/>.
#-

import argparse
import nagiosplugin

def load_meminfo() :
    "reads the contents of /proc/meminfo and returns a dict of the items found."
    result = {}
    for line in open("/proc/meminfo", "r") :
        items = line.split(":", 1)
        if len(items) == 2 :
            keyword, value = tuple(i.strip() for i in items)
            value = value.split(" ", 1)
            if len(value) > 1 :
                value, units = value
                assert units == "kB" # canâ€™t handle anything else for now
            else :
                value = value[0]
            #end if
            result[keyword] = int(value)
        #end if
    #end line
    return \
        result
#end load_meminfo

class Swapfree(nagiosplugin.Resource) :

    def probe(self) :
        meminfo = load_meminfo()
        metrics = list \
          (
            nagiosplugin.Metric
              (
                name = name,
                value = value,
                uom = units
              )
            for name, value, units in
                (
                    (
                        "%avail",
                        (
                            lambda : 100,
                            lambda : round(100 * meminfo["SwapFree"] / meminfo["SwapTotal"]),
                        )[meminfo["SwapTotal"] != 0](),
                        "%",
                    ),
                    ("avail", meminfo["SwapFree"], "kB"),
                    ("total", meminfo["SwapTotal"], "kB"),
                )
          )
        return \
            metrics
    #end probe

#end Swapfree

def main() :
    parser = argparse.ArgumentParser(description = "check free swap space")
    for shortopt, longopt, kwargs in \
        (
            (
                "-w", "--warning",
                {
                    "metavar" : "RANGE",
                    "default" : 10,
                    "help" : "warn if percentage of available swap falls below this",
                },
            ),
            (
                "-c", "--critical",
                {
                    "metavar" : "RANGE",
                    "default" : 5,
                    "help" : "critical if percentage of available swap falls below this",
                },
            ),
            (
                "-v", "--verbose",
                {
                    "action" : "count",
                    "default" : 0,
                    "help" : "increase output verbosity",
                },
            ),
        ) \
    :
        parser.add_argument(shortopt, longopt, **kwargs)
    #end for
    args = parser.parse_args()
    nagiosplugin.Check \
      (
        Swapfree(),
        nagiosplugin.ScalarContext("%avail", "@%d" % int(args.warning), "@%d" % int(args.critical)),
        nagiosplugin.ScalarContext("avail"),
        nagiosplugin.ScalarContext("total"),
        nagiosplugin.Summary()
      ).main(verbose = args.verbose)
#end main

if __name__ == "__main__" :
    main()
#end if
