#!/usr/bin/python3
#+
# This Nagios plugin monitors the output of a given command,
# looking for changes in a specified numeric item, giving
# alerts if the rate of change is too high or too low.
#-

import enum
import collections
import time
import subprocess
import re
import getopt
import argparse
import nagiosplugin
from ldo_nagios_useful import \
    PersistentStats

#+
# Useful stuff
#-

@enum.unique
class LIMIT(enum.Enum) :
    MAX = "max"
    MIN = "min"

    def val_ok(self, val, limit) :
        return \
            {
                LIMIT.MAX : lambda : val <= limit,
                LIMIT.MIN : lambda : val >= limit,
            }[self]()
    #end val_ok

    @classmethod
    def valid_values(celf) :
        return set(sorted(v.value for v in celf.__members__.values()))
    #end valid_values

#end LIMIT

def natural(i) :
    result = int(i)
    if result <= 0 :
        raise ValueError("not a positive integer: %s" % repr(i))
    #end if
    return \
        result
#end natural

def limit_sym(s) :
    if s in LIMIT.valid_values() :
        result = LIMIT(s)
    else :
        raise ValueError \
          (
                "not a recognized limit type (%s) -- %s"
            %
                (", ".join(m for m in sorted(LIMIT.valid_values())), repr(s))
          )
    #end if
    return \
        result
#end limit_sym

numpat = re.compile(r"(?:^|\W)([\+\-]?[0-9]+(?:\.?[0-9]*))")

class RangeCheck :
    "because I cannot get the effect I want with nagiosplugin.Range."

    def __init__(self, limit, limit_how) :
        self.limit = limit
        self.limit_how = limit_how
    #end __new__

    def match(self, value) :
        return \
            self.limit_how.val_ok(value, self.limit)
    #end match

    def __repr__(self) :
        return \
            (
                "RangeCheck(%s %.3g)"
            %
                ({LIMIT.MAX : "<=", LIMIT.MIN : ">="}[self.limit_how], self.limit)
            )
    #end __repr__

    @property
    def violation(self) :
        return \
            "outside range %s" % repr(self)
    #end self

#end RangeCheck

class Deltamon(nagiosplugin.Resource) :

    def __init__(self, cmd, linenr, itemnr) :
        self.stats = PersistentStats("deltamon/" + cmd)
        self.cmd = cmd
        self.linenr = linenr
        self.itemnr = itemnr
    #end __init__

    def probe(self) :
        now = time.time()
        data = subprocess.check_output \
          (
            args = self.cmd,
            close_fds = False,
            shell = True,
          )
        data = data.decode("utf-8")
        data = data.split("\n")
        values = {} # to begin with
        key = "(%d, %d)" % (self.linenr, self.itemnr)
        if self.linenr <= len(data) :
            line = data[self.linenr - 1]
            items = tuple(m.group(1) for m in numpat.finditer(line))
            if self.itemnr <= len(items) :
    	        values[key] = float(items[self.itemnr - 1])
            #end if
        #end if
        values = self.stats.get_and_update(values, now)
        value = values[key]
        metrics = \
          [
            nagiosplugin.Metric
              (
                name = "value",
                value = (lambda : 0, lambda : value[2] / value[3])[value[0] != None](),
                uom = ""
              )
          ]
        return \
            metrics
    #end probe

#end Deltamon

def main() :
    parser = argparse.ArgumentParser(description = "deltamon")
    for shortopt, longopt, kwargs in \
        (
            (
                "-w", "--warning",
                {
                    "metavar" : "LIMIT",
                    "type" : float,
                    "help" : "warn if rate of change is above/below this",
                },
            ),
            (
                "-c", "--critical",
                {
                    "metavar" : "LIMIT",
                    "type" : float,
                    "help" : "critical if rate of change is above/below this",
                },
            ),
            (
                None, "--limit",
                {
                    "metavar" : "HOW",
                    "type" : limit_sym,
                    "help" :
                        "“max” or “min” indicating how to interpret the limit values",
                },
            ),
            (
                "-v", "--verbose",
                {
                    "action" : "count",
                    "default" : 0,
                    "help" : "increase output verbosity",
                },
            ),
            (
                "-x", "--command",
                {
                    "help" : "the command to be executed",
                },
            ),
            (
                "-l", "--line",
                {
                    "type" : natural,
                    "help" :
                        "the line number on which the desired numeric item will appear",
                },
            ),
            (
                "-i", "--item",
                {
                    "type" : natural,
                    "help" :
                        "the index (counting from 1) of the desired"
                        " numeric item on the line",
                },
            ),
            (
                None, "--label",
                {
                    "help" : "the descriptive label for the numeric item",
                },
            ),
        ) \
    :
        if shortopt != None :
            parser.add_argument(shortopt, longopt, **kwargs)
        else :
            parser.add_argument(longopt, **kwargs)
        #end if
    #end for
    args = parser.parse_args()
    if args.command == None or args.line == None or args.item == None or args.limit == None or args.label == None :
        raise getopt.GetoptError("missing --command, --line, --item, --limit or --label")
    #end if
    value_context = nagiosplugin.ScalarContext("value", args.warning, args.critical)
    value_context.warning = RangeCheck(args.warning, args.limit)
    value_context.critical = RangeCheck(args.critical, args.limit)
    nagiosplugin.Check \
      (
        Deltamon(args.command, args.line, args.item),
        value_context,
        nagiosplugin.Summary()
      ).main(verbose = args.verbose)
#end main

if __name__ == "__main__" :
    main()
#end if
